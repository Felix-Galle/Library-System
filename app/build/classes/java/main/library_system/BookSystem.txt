package library.systemv07.library_systemv07;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class BookSystem {

    // Book Class
    public static class Book {
        private String bookid;
        private String title;
        private String author;
        private String genre;
        private List<Boolean> type;
        private String description;
        private String curBorrower;
        private LinkedList<String> allBorrowers;

        public Book(String bookid, String title, String author, String genre, List<Boolean> type, String description, String curBorrower, LinkedList<String> allBorrowers) {
            this.bookid = bookid;
            this.title = title;
            this.author = author;
            this.genre = genre;
            this.type = type;
            this.description = description;
            this.curBorrower = curBorrower;
            this.allBorrowers = new LinkedList<>();
        }

        public static void addBook(String bookid, String title, String author, String genre, List<Boolean> type, String description) {
            Path bookDataDir = Paths.get("data", "bookdata", bookid + ".txt");
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(bookDataDir.toFile()))) {
                writer.write("title=\"" + title + "\"\n");
                writer.write("author=\"" + author + "\"\n");
                writer.write("genre=\"" + genre + "\"\n");
                writer.write("type=[");
                for (int i = 0; i < type.size(); i++) {
                    writer.write(type.get(i).toString());
                    if (i < type.size() - 1) {
                        writer.write(",");
                    }
                }
                writer.write("]\n");
                writer.write("description=\"" + description + "\"\n");
                writer.write("cur_borrower=\"\"\n");
                writer.write("all_borrower=[\"\"]\n");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error adding book: " + e.getMessage());
            }
        }

        public static void removeBook(String id) {
            Path bookDataDir = Paths.get("data", "bookdata", id + ".txt");
            try {
                Files.delete(bookDataDir);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error removing book: " + e.getMessage());
            }
        }

        public static List<BookInfo> getBooks() {
            List<BookInfo> books = new ArrayList<>();
            Path bookDataDir = Paths.get("data", "bookdata");
            try (DirectoryStream<Path> stream = Files.newDirectoryStream(bookDataDir)) {
                for (Path filePath : stream) {
                    if (Files.isRegularFile(filePath)) {
                        String bookId = filePath.getFileName().toString().split("\\.")[0];
                        try (BufferedReader reader = new BufferedReader(new FileReader(filePath.toString()))) {
                            String line;
                            String title = null;
                            String author = null;
                            String genre = null;
                            List<Boolean> type = new ArrayList<>();
                            String description = null;
                            String cur_borrower = null;
                            LinkedList<String> all_borrower = null;
                            while ((line = reader.readLine()) != null) {
                                if (line.startsWith("title=\"")) {
                                    title = line.substring(7, line.length() - 1);
                                } else if (line.startsWith("author=")) {
                                    author = line.substring(7, line.length() - 1);
                                } else if (line.startsWith("genre=")) {
                                    genre = line.substring(6, line.length() - 1);
                                } else if (line.startsWith("type=[")) {
                                    String[] typeStr = line.substring(6, line.length() - 1).split(",");
                                    for (String s : typeStr) {
                                        type.add(Boolean.parseBoolean(s.trim()));
                                    }
                                } else if (line.startsWith("description=")) {
                                    description = line.substring(12, line.length() - 1);
                                } else if (line.startsWith("cur_borrower=")) {
                                    cur_borrower = line.substring(12, line.length() - 1);
                                } else if (line.startsWith("all _borrower=")) {
                                    all_borrower = new LinkedList<>();
                                }
                                if (title != null && author != null && genre != null && type != null && description != null && cur_borrower != null && all_borrower != null) {
                                    break;
                                }
                            }
                            books.add(new BookInfo(bookId, title, author, genre, type, description, cur_borrower, all_borrower));
                        }
                    }
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error reading book data: " + e.getMessage());
            }
            return books;
        }

        public static Book getBook(String bookID) {
            List<BookInfo> books = Book.getBooks();
            for (BookInfo book : books) {
                if (book.getBookID().equals(bookID)) {
                    return new Book(book.getBookID(), book.getTitle(), book.getAuthor(), book.getGenre(), book.getType(), book.getDescription(), book.getCur_borrower(), book.getAll_borrowers());
                }
            }
            return null;
        }

        public static void editBook(String bookid, String newTitle, String author, String genre, List<Boolean> type, String description) {
            Path bookDataDir = Paths.get("data", "bookdata", bookid + ".txt");
            try (BufferedReader reader = new BufferedReader(new FileReader(bookDataDir.toString()))) {
                String line;
                StringBuilder content = new StringBuilder();
                while ((line = reader.readLine()) != null) {
                    if (line.startsWith("title=\"")) {
                        content.append("title=\"").append(newTitle).append("\"\n");
                    } else if (line.startsWith("author=")) {
                        content.append("author=\"").append(author).append("\"\n");
                    } else if (line.startsWith("genre=")) {
                        content.append("genre=\"").append(genre).append("\"\n");
                    } else if (line.startsWith("type=[")) {
                        content.append("type=[");
                        for (Boolean b : type) {
                            content.append(b.toString()).append(",");
                        }
                        content.deleteCharAt(content.length() - 1); // remove the last comma
                        content.append("]\n");
                    } else if (line.startsWith("description=")) {
                        content.append("description=\"").append(description).append("\"\n");
                    } else {
                        content.append(line).append("\n");
                    }
                }
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(bookDataDir.toFile()))) {
                    writer.write(content.toString());
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error editing book: " + e.getMessage());
            }
        }

        public void loanBook(String borrowerId) {
            if (curBorrower.isEmpty()) {
                curBorrower = borrowerId;
                allBorrowers.add(borrowerId);
                editBook(bookid, title, author, genre, type, description);
            } else {
                JOptionPane.showMessageDialog(null, "Book is already borrowed by " + curBorrower);
            }
        }

        public static void returnBook(String userID, String bookID) {
            List<User.UserInfo> users = User.getUsers();
            for (User .UserInfo user : users) {
                if (user.getUser ID().equals(userID)) {
                    if (user.getCur_books().contains(bookID)) {
                        BookInfo bookInfo = getBookInfo(bookID);
                        if (bookInfo != null) {
                            bookInfo.setCur_borrower("");
                            bookInfo.getAll_borrowers().add(userID);
                            editBook(bookID, bookInfo.getTitle(), bookInfo.getAuthor(), bookInfo.getGenre(), bookInfo.getType(), bookInfo.getDescription());
                            user.getCur_books().remove(bookID);
                            User.editUser (userID, user.getLname(), user.getFname(), user.getGrade());
                            TerminalLog.InfoLog("Book returned successfully.");
                        } else {
                            TerminalLog.ErrorLog("Book not found.");
                        }
                    } else {
                        TerminalLog.ErrorLog("User  does not have this book.");
                    }
                    return;
                }
            }
            TerminalLog.ErrorLog("User  not found.");
        }

        public static BookInfo getBookInfo(String bookID) {
            List<BookInfo> books = getBooks();
            for (BookInfo book : books) {
                if (book.getBookID().equals(bookID)) {
                    return book;
                }
            }
            return null;
        }

        public static void returnBooks(String userID, List<String> bookIDs) {
            for (String bookID : bookIDs) {
                returnBook(userID, bookID);
            }
        }

        public ```java
        static class BookInfo {
            private String bookID;
            private String title;
            private String author;
            private String genre;
            private List<Boolean> type;
            private String description;
            private String cur_borrower;
            private LinkedList<String> all_borrowers;

            public BookInfo(String bookID, String title, String author, String genre, List<Boolean> type, String description, String cur_borrower, LinkedList<String> all_borrowers) {
                this.bookID = bookID;
                this.title = title;
                this.author = author;
                this.genre = genre;
                this.type = type;
                this.description = description;
                this.cur_borrower = cur_borrower;
                this.all_borrowers = all_borrowers;
            }

            public String getBookID() {
                return bookID;
            }

            public String getTitle() {
                return title;
            }

            public String getAuthor() {
                return author;
            }

            public String getGenre() {
                return genre;
            }

            public List<Boolean> getType() {
                return type;
            }

            public String getDescription() {
                return description;
            }

            public String getCur_borrower() {
                return cur_borrower;
            }

            public LinkedList<String> getAll_borrowers() {
                return all_borrowers;
            }

            public void setCur_borrower(String cur_borrower) {
                this.cur_borrower = cur_borrower;
            }

            public void setAll_borrowers(LinkedList<String> all_borrowers) {
                this.all_borrowers = all_borrowers;
            }
        }
    }

    // User Class
    public static class User {
        public static void addUser (String userID, String Lname, String Fname, String grade) {
            String hashedID = Pass.hashPass(userID);
            String filePath = "data\\userdata\\" + hashedID + ".txt";
            File file = new File(filePath);
            File dir = file.getParentFile();
            if (!dir.exists()) {
                dir.mkdirs();
            }
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                writer.write("Lname = " + Lname + "\n");
                writer.write("Fname = " + Fname + "\n");
                writer.write("grade = " + grade + "\n");
                writer.write("cur_loanList = \n");
                writer.write("all_LoanList = \n");
            } catch (IOException e) {
                System.out.println("Error adding user: " + e.getMessage());
            }
        }

        public static void editUser (String userID, String Lname, String Fname, String grade) {
            try (BufferedReader reader = new BufferedReader(new FileReader("data\\userdata\\" + userID))) {
                String line;
                StringBuilder content = new StringBuilder();

                while ((line = reader.readLine()) != null) {
                    if (line.startsWith("Lname = ")) {
                        content.append("Lname = ").append(Lname).append("\n");
                    } else if (line.startsWith("Fname = ")) {
                        content.append("Fname = ").append(Fname).append("\n");
                    } else if (line.startsWith("grade = ")) {
                        content.append("grade = ").append(grade).append("\n");
                    } else {
                        content.append(line).append("\n");
                    }
                }

                try (BufferedWriter writer = new BufferedWriter(new FileWriter("data\\userdata\\" + userID))) {
                    writer.write(content.toString());
                }

                TerminalLog.InfoLog("User  data edit successful.");
            } catch (IOException e) {
                System.out.println("Error editing user: " + e.getMessage());
            }
        }

        public static void removeUser (String userID) {
            String hashedID = Pass.hashPass(userID);
            Path filePath = Paths.get("data\\userdata\\" + hashedID + ".txt");
            try {
                Files.delete(filePath);
            } catch (IOException e) {
                System.out.println("Error deleting user: " + e.getMessage());
            }
        }

        public static List<UserInfo> getUsers() {
            List<UserInfo> users = new ArrayList<>();
            Path userDataDir = Paths.get("data\\userdata");
            try (DirectoryStream<Path> stream = Files.newDirectoryStream(userDataDir)) {
                for (Path filePath : stream) {
                    if (Files.isRegularFile(filePath)) {
                        String fileName = filePath.getFileName().toString();
                        String userID = fileName.substring(0, fileName.length() - 4); // Remove the ".txt" extension
                        try (BufferedReader reader = ```java
                        new BufferedReader(new FileReader(filePath.toString()))) {
                            String line;
                            String lname = null;
                            String fname = null;
                            String grade = null;
                            ArrayList<String> cur_books = new ArrayList<>();
                            LinkedList<String> all_books = new LinkedList<>();

                            while ((line = reader.readLine()) != null) {
                                if (line.startsWith("Lname = ")) {
                                    lname = line.substring(7).trim();
                                } else if (line.startsWith("Fname = ")) {
                                    fname = line.substring(7).trim();
                                } else if (line.startsWith("grade = ")) {
                                    grade = line.substring(7).trim();
                                } else if (line.startsWith("cur_loanList = ")) {
                                    while ((line = reader.readLine()) != null) {
                                        if (line.trim().isEmpty()) {
                                            break;
                                        }
                                        cur_books.add(line.trim());
                                    }
                                } else if (line.startsWith("all_LoanList = ")) {
                                    while ((line = reader.readLine()) != null) {
                                        if (line.trim().isEmpty()) {
                                            break;
                                        }
                                        all_books.add(line.trim());
                                    }
                                }
                                if (lname != null && fname != null && grade != null) {
                                    break;
                                }
                            }
                            users.add(new UserInfo(userID, lname, fname, fileName, grade, cur_books, all_books));
                        }
                    }
                }
            } catch (IOException e) {
                System.out.println("Error getting users: " + e.getMessage());
            }
            return users;
        }

        public static void viewUser (String userID) {
            String hashedID = Pass.hashPass(userID);
            List<UserInfo> users = getUsers();
            for (User Info user : users) {
                if (user.getUser ID().equals(hashedID)) {
                    System.out.println("User  ID: " + user.getUser ID());
                    System.out.println("Last Name: " + user.getLname());
                    System.out.println("First Name: " + user.getFname());
                    System.out.println("Grade: " + user.getGrade());
                    System.out.println("Current Loans: " + user.getCur_books());
                    System.out.println("All Loans: " + user.getAll_books());
                    return;
                }
            }
            System.out.println("User  not found.");
        }

        public static void loanBook(String userID, String bookID) {
            List<UserInfo> users = getUsers();
            for (User Info user : users) {
                if (user.getUser ID().equals(userID)) {
                    if (user.getCur_books().size() < 5) {
                        Book book = Book.getBook(bookID);
                        if (book != null) {
                            book.loanBook(userID);
                            user.getCur_books().add(bookID);
                            editUser (userID, user.getLname(), user.getFname(), user.getGrade());
                            TerminalLog.InfoLog("Book loaned successfully.");
                        } else {
                            TerminalLog.ErrorLog("Book not found.");
                        }
                    } else {
                        TerminalLog.ErrorLog("User  has already borrowed 5 books.");
                    }
                    return;
                }
            }
            TerminalLog.ErrorLog("User  not found.");
        }

        public static class UserInfo {
            private String userID;
            private String lname;
            private String fname;
            private String fileName;
            private String grade;
            private ArrayList<String> cur_books;
            private LinkedList<String> all_books;

            public UserInfo(String userID, String lname, String fname, String fileName, String grade, ArrayList<String> cur_books, LinkedList<String> all_books) {
                this.userID = userID;
                this.lname = lname;
                this.fname = fname;
                this.fileName = fileName;
                this.grade = grade;
                this.cur_books = cur_books;
                this.all_books = all_books;
            }

            public String getUser ID() {
                return userID;
            }

            public String getLname() {
                return lname;
            }

            public String getFname() {
                return fname;
            }

            public String getFileName() {
                return fileName;
            }

            public String getGrade() {
                return grade;
            }

            public ArrayList<String> getCur_books() {
                return cur_books;
            }

            public LinkedList<String> getAll_books() {
                return all_books;
            }
        }
    }
}